package jdk.javadoc.internal.doclets.toolkit.resources;

public final class doclets extends java.util.ListResourceBundle {
    protected final Object[][] getContents() {
        return new Object[][] {
            { "doclet.Abstract_Methods", "Abstract Methods" },
            { "doclet.All_Classes_And_Interfaces", "All Classes and Interfaces" },
            { "doclet.All_Implemented_Interfaces", "All Implemented Interfaces:" },
            { "doclet.All_Methods", "All Methods" },
            { "doclet.All_Modules", "All Modules" },
            { "doclet.All_Packages", "All Packages" },
            { "doclet.All_Superinterfaces", "All Superinterfaces:" },
            { "doclet.AnnotationInterface", "Annotation Interface" },
            { "doclet.AnnotationInterfaces", "Annotation Interfaces" },
            { "doclet.AnnotationType", "Annotation Type" },
            { "doclet.AnnotationTypes", "Annotation Types" },
            { "doclet.Annotation_Interface_Member", "Annotation Interface Element" },
            { "doclet.Annotation_Type_Member", "Annotation Type Element" },
            { "doclet.Annotation_Type_Member_Detail", "Element Details" },
            { "doclet.Annotation_Type_Optional_Member", "Optional Element" },
            { "doclet.Annotation_Type_Optional_Member_Summary", "Optional Element Summary" },
            { "doclet.Annotation_Type_Optional_Members", "Optional Elements" },
            { "doclet.Annotation_Type_Required_Member", "Required Element" },
            { "doclet.Annotation_Type_Required_Member_Summary", "Required Element Summary" },
            { "doclet.Annotation_Type_Required_Members", "Required Elements" },
            { "doclet.Author", "Author:" },
            { "doclet.Building_Index", "Building index for all the packages and classes..." },
            { "doclet.Building_Index_For_All_Classes", "Building index for all classes..." },
            { "doclet.Building_Tree", "Building tree for all the packages and classes..." },
            { "doclet.Class", "Class" },
            { "doclet.Classes", "Classes" },
            { "doclet.Concealed_Packages_Summary", "Concealed" },
            { "doclet.Concrete_Methods", "Concrete Methods" },
            { "doclet.ConstantField", "Constant Field" },
            { "doclet.Constants_Summary", "Constant Field Values" },
            { "doclet.Constructor", "Constructor" },
            { "doclet.Constructor_Detail", "Constructor Details" },
            { "doclet.Constructor_Summary", "Constructor Summary" },
            { "doclet.Constructors", "Constructors" },
            { "doclet.Copy_Ignored_warning", "File {0} not copied: invalid name" },
            { "doclet.Copy_Overwrite_warning", "File {0} not copied to {1} due to existing file with same name..." },
            { "doclet.Copying_File_0_To_Dir_1", "Copying file {0} to directory {1}..." },
            { "doclet.Copying_File_0_To_File_1", "Copying file {0} to file {1}..." },
            { "doclet.Default", "Default:" },
            { "doclet.DefaultValue", "Default value:" },
            { "doclet.Default_Methods", "Default Methods" },
            { "doclet.Deprecated", "Deprecated." },
            { "doclet.DeprecatedForRemoval", "Deprecated, for removal: This API element is subject to removal in a future version." },
            { "doclet.Deprecated_Methods", "Deprecated Methods" },
            { "doclet.Description", "Description" },
            { "doclet.Encoding_not_supported", "Encoding not supported: {0}" },
            { "doclet.Enum", "Enum" },
            { "doclet.EnumClass", "Enum Class" },
            { "doclet.EnumClasses", "Enum Classes" },
            { "doclet.Enum_Constant", "Enum Constant" },
            { "doclet.Enum_Constant_Detail", "Enum Constant Details" },
            { "doclet.Enum_Constant_Summary", "Enum Constant Summary" },
            { "doclet.Enum_Constants", "Enum Constants" },
            { "doclet.Enums", "Enums" },
            { "doclet.Error", "Error" },
            { "doclet.Error_invalid_custom_tag_argument", "Error - {0} is an invalid argument to the -tag option..." },
            { "doclet.Error_taglet_not_registered", "Error - Exception {0} thrown while trying to register Taglet {1}..." },
            { "doclet.Errors", "Errors" },
            { "doclet.Exception", "Exception" },
            { "doclet.Exceptions", "Exceptions" },
            { "doclet.ExportedTo", "Exported To Modules" },
            { "doclet.Exported_Packages_Summary", "Exports" },
            { "doclet.Factory", "Factory:" },
            { "doclet.Field", "Field" },
            { "doclet.Field_Detail", "Field Details" },
            { "doclet.Field_Summary", "Field Summary" },
            { "doclet.Fields", "Fields" },
            { "doclet.Fields_Declared_In_Class", "Fields declared in class" },
            { "doclet.Fields_Declared_In_Interface", "Fields declared in interface" },
            { "doclet.Fields_Inherited_From_Class", "Fields inherited from class" },
            { "doclet.Fields_Inherited_From_Interface", "Fields inherited from interface" },
            { "doclet.File_not_found", "File not found: {0}" },
            { "doclet.From", "From" },
            { "doclet.Generating_0", "Generating {0}..." },
            { "doclet.Groupname_already_used", "In -group option, groupname already used: {0}" },
            { "doclet.Implementation", "Implementation(s):" },
            { "doclet.Indirect_Exports_Summary", "Indirect Exports" },
            { "doclet.Indirect_Opens_Summary", "Indirect Opens" },
            { "doclet.Indirect_Requires_Summary", "Indirect Requires" },
            { "doclet.Instance_Methods", "Instance Methods" },
            { "doclet.Interface", "Interface" },
            { "doclet.Interfaces", "Interfaces" },
            { "doclet.JavaScript_in_comment", "JavaScript found in documentation comment.\nUse --allow-script-in-comments to allow use of JavaScript." },
            { "doclet.JavaScript_in_option", "option {0} contains JavaScript.\nUse --allow-script-in-comments to allow use of JavaScript." },
            { "doclet.Method", "Method" },
            { "doclet.Method_Detail", "Method Details" },
            { "doclet.Method_Summary", "Method Summary" },
            { "doclet.Methods", "Methods" },
            { "doclet.Methods_Declared_In_Class", "Methods declared in class" },
            { "doclet.Methods_Declared_In_Interface", "Methods declared in interface" },
            { "doclet.Methods_Inherited_From_Class", "Methods inherited from class" },
            { "doclet.Methods_Inherited_From_Interface", "Methods inherited from interface" },
            { "doclet.MissingSerialDataTag", "in class {0}, missing @serialData tag in method {1}." },
            { "doclet.MissingSerialTag", "in class {0}, missing @serial tag for default serializable field: {1}." },
            { "doclet.Modifier", "Modifier" },
            { "doclet.Modifier_and_Type", "Modifier and Type" },
            { "doclet.Modules", "Modules" },
            { "doclet.Nested_Class_Summary", "Nested Class Summary" },
            { "doclet.Nested_Classes", "Nested Classes" },
            { "doclet.Nested_Classes_Interfaces_Declared_In_Class", "Nested classes/interfaces declared in class" },
            { "doclet.Nested_Classes_Interfaces_Declared_In_Interface", "Nested classes/interfaces declared in interface" },
            { "doclet.Nested_Classes_Interfaces_Inherited_From_Class", "Nested classes/interfaces inherited from class" },
            { "doclet.Nested_Classes_Interfaces_Inherited_From_Interface", "Nested classes/interfaces inherited from interface" },
            { "doclet.No_Public_Classes_To_Document", "No public or protected classes found to document." },
            { "doclet.Notice_taglet_conflict_warn", "Note: Custom tags that could override future standard tags: {0}. To avoid potential overrides, use at least one period character (.) in custom tag names." },
            { "doclet.Notice_taglet_overridden", "Note: Custom tags that override standard tags: {0}" },
            { "doclet.Notice_taglet_registered", "Registered Taglet {0} ..." },
            { "doclet.Notice_taglet_unseen", "Note: Custom tags that were not seen: {0}" },
            { "doclet.OpenedTo", "Opened To Modules" },
            { "doclet.Opened_Packages_Summary", "Opens" },
            { "doclet.Option_conflict", "Option {0} conflicts with {1}" },
            { "doclet.Option_doclint_invalid_arg", "Invalid argument for -Xdoclint option" },
            { "doclet.Option_doclint_no_qualifiers", "Access qualifiers not permitted for -Xdoclint arguments" },
            { "doclet.Option_doclint_package_invalid_arg", "Invalid argument for -Xdoclint/package option" },
            { "doclet.Option_invalid", "Invalid argument {0} for {1} option" },
            { "doclet.Option_reuse", "Option reused: {0}" },
            { "doclet.Other_Modules", "Other Modules" },
            { "doclet.Other_Packages", "Other Packages" },
            { "doclet.Package_Summary", "Package Summary" },
            { "doclet.Package_private", "(package private)" },
            { "doclet.Packages", "Packages" },
            { "doclet.Parameters", "Parameters:" },
            { "doclet.Parameters_dup_warn", "Parameter \"{0}\" is documented more than once." },
            { "doclet.Parameters_warn", "@param argument \"{0}\" is not a parameter name." },
            { "doclet.Preview", "Preview." },
            { "doclet.Properties", "Properties" },
            { "doclet.Properties_Declared_In_Class", "Properties declared in class" },
            { "doclet.Properties_Declared_In_Interface", "Properties declared in interface" },
            { "doclet.Properties_Inherited_From_Class", "Properties inherited from class" },
            { "doclet.Properties_Inherited_From_Interface", "Properties inherited from interface" },
            { "doclet.Property", "Property" },
            { "doclet.PropertyDescription", "Property description:" },
            { "doclet.PropertyGetterWithName", "Gets the value of the property {0}." },
            { "doclet.PropertySetterWithName", "Sets the value of the property {0}." },
            { "doclet.Property_Detail", "Property Details" },
            { "doclet.Property_Summary", "Property Summary" },
            { "doclet.Provides_Summary", "Provides" },
            { "doclet.RecordClass", "Record Class" },
            { "doclet.RecordClasses", "Record Classes" },
            { "doclet.RecordComponents", "Record Components:" },
            { "doclet.RecordComponents_dup_warn", "Record component \"{0}\" is documented more than once." },
            { "doclet.RecordComponents_warn", "@param argument \"{0}\" is not the name of a record component." },
            { "doclet.Related_Packages", "Related Packages" },
            { "doclet.Requires_Summary", "Requires" },
            { "doclet.Return_tag_on_void_method", "@return tag cannot be used in method with void return type." },
            { "doclet.Returns", "Returns:" },
            { "doclet.Returns_0", "Returns {0}." },
            { "doclet.See_Also", "See Also:" },
            { "doclet.SerialData", "Serial Data:" },
            { "doclet.Serializable_no_customization", "No readObject or writeObject method declared." },
            { "doclet.Serialized_Form", "Serialized Form" },
            { "doclet.Serialized_Form_class", "Serialization Overview" },
            { "doclet.Serialized_Form_fields", "Serialized Fields" },
            { "doclet.Serialized_Form_methods", "Serialization Methods" },
            { "doclet.Services", "Services" },
            { "doclet.Since", "Since:" },
            { "doclet.Static_Methods", "Static Methods" },
            { "doclet.Throws", "Throws:" },
            { "doclet.Toolkit_Usage_Violation", "The Doclet Toolkit can only be used by {0}" },
            { "doclet.Type", "Type" },
            { "doclet.TypeParameters", "Type Parameters:" },
            { "doclet.TypeParameters_dup_warn", "Type parameter \"{0}\" is documented more than once." },
            { "doclet.TypeParameters_warn", "@param argument \"{0}\" is not the name of a type parameter." },
            { "doclet.UnknownTag", "{0} is an unknown tag." },
            { "doclet.UnknownTagLowercase", "{0} is an unknown tag -- same as a known tag except for case." },
            { "doclet.Uses_Summary", "Uses" },
            { "doclet.Value", "Value" },
            { "doclet.Version", "Version:" },
            { "doclet.annotationinterface", "annotation interface" },
            { "doclet.annotationinterfaces", "annotation interfaces" },
            { "doclet.annotationtype", "annotation type" },
            { "doclet.annotationtypes", "annotation types" },
            { "doclet.class", "class" },
            { "doclet.dest_dir_create", "Creating destination directory: \"{0}\"" },
            { "doclet.destination_directory_not_directory_0", "Destination directory is not a directory: {0}" },
            { "doclet.destination_directory_not_writable_0", "Destination directory not writable: {0}" },
            { "doclet.enum", "enum" },
            { "doclet.enum_class_valueof_doc.fullbody", "Returns the enum constant of this class with the specified name.\nThe string must match <i>exactly</i> an identifier used to declare an\nenum constant in this class.  (Extraneous whitespace characters are \nnot permitted.)" },
            { "doclet.enum_class_valueof_doc.throws_ila", "if this enum class has no constant with the specified name" },
            { "doclet.enum_class_values_doc.fullbody", "Returns an array containing the constants of this enum class, in\nthe order they are declared." },
            { "doclet.enum_class_values_doc.return", "an array containing the constants of this enum class, in the order they are declared" },
            { "doclet.enum_valueof_doc.fullbody", "Returns the enum constant of this type with the specified name.\nThe string must match <i>exactly</i> an identifier used to declare an\nenum constant in this type.  (Extraneous whitespace characters are \nnot permitted.)" },
            { "doclet.enum_valueof_doc.param_name", "the name of the enum constant to be returned." },
            { "doclet.enum_valueof_doc.return", "the enum constant with the specified name" },
            { "doclet.enum_valueof_doc.throws_ila", "if this enum type has no constant with the specified name" },
            { "doclet.enum_valueof_doc.throws_npe", "if the argument is null" },
            { "doclet.enum_values_doc.fullbody", "Returns an array containing the constants of this enum type, in\nthe order they are declared." },
            { "doclet.enum_values_doc.return", "an array containing the constants of this enum type, in the order they are declared" },
            { "doclet.enumclass", "enum class" },
            { "doclet.enumclasses", "enum classes" },
            { "doclet.enums", "enums" },
            { "doclet.error", "error" },
            { "doclet.error.initializing.dest.dir", "Error initializing destination directory: {0}" },
            { "doclet.exception", "exception" },
            { "doclet.exception.read.file", "Error reading file: {0}\n\t({1})" },
            { "doclet.exception.read.resource", "Error reading system resource: {0}\n\t({1})" },
            { "doclet.exception.write.file", "Error writing file: {0}\n\t({1})" },
            { "doclet.in", "{0} in {1}" },
            { "doclet.interface", "interface" },
            { "doclet.internal.exception", "An internal exception has occurred. \n\t({0})" },
            { "doclet.internal.report.bug", "Please file a bug against the javadoc tool via the Java bug reporting page\n(http://bugreport.java.com) after checking the Bug Database (http://bugs.java.com)\nfor duplicates. Include error messages and the following diagnostic in your report. Thank you." },
            { "doclet.linkMismatch_ModuleLinkedtoPackage", "The code being documented uses modules but the packages defined in {0} are in the unnamed module." },
            { "doclet.linkMismatch_PackagedLinkedtoModule", "The code being documented uses packages in the unnamed module, but the packages defined in {0} are in named modules." },
            { "doclet.noInheritedDoc", "@inheritDoc used but {0} does not override or implement any method." },
            { "doclet.not_standard_file_manager", "Cannot set taglet path; the file manager is not a StandardJavaFileManager" },
            { "doclet.platform.docs.ea", "https://download.java.net/java/early_access/jdk{0}/docs/api/" },
            { "doclet.platform.docs.new", "https://docs.oracle.com/en/java/javase/{0}/docs/api/" },
            { "doclet.platform.docs.old", "https://docs.oracle.com/javase/{0}/docs/api/" },
            { "doclet.record_accessor_doc.fullbody", "Returns the value of the {0} record component." },
            { "doclet.record_accessor_doc.return", "the value of the {0} record component" },
            { "doclet.record_constructor_doc.fullbody", "Creates an instance of a {0} record class." },
            { "doclet.record_constructor_doc.param_name", "the value for the {0} record component" },
            { "doclet.record_equals_doc.fullbody.head", "Indicates whether some other object is \"equal to\" this one. The objects are equal if the other object is of the same class and if all the record components are equal." },
            { "doclet.record_equals_doc.fullbody.tail.both", "Reference components are compared with {@link java.util.Objects#equals(Object,Object) Objects::equals(Object,Object)}; primitive components are compared with '=='." },
            { "doclet.record_equals_doc.fullbody.tail.primitive", "All components in this record class are compared with '=='." },
            { "doclet.record_equals_doc.fullbody.tail.reference", "All components in this record class are compared with {@link java.util.Objects#equals(Object,Object) Objects::equals(Object,Object)}." },
            { "doclet.record_equals_doc.param_name", "the object with which to compare" },
            { "doclet.record_equals_doc.return", "<code>true</code> if this object is the same as the {0} argument; <code>false</code> otherwise." },
            { "doclet.record_field_doc.fullbody", "The field for the {0} record component." },
            { "doclet.record_hashCode_doc.fullbody", "Returns a hash code value for this object. The value is derived from the hash code of each of the record components." },
            { "doclet.record_hashCode_doc.return", "a hash code value for this object" },
            { "doclet.record_toString_doc.fullbody", "Returns a string representation of this record class. The representation contains the name of the class, followed by the name and value of each of the record components." },
            { "doclet.record_toString_doc.return", "a string representation of this object" },
            { "doclet.recordclass", "record class" },
            { "doclet.search", "SEARCH:" },
            { "doclet.search.classes_and_interfaces", "Classes and Interfaces" },
            { "doclet.search.loading", "Loading search index..." },
            { "doclet.search.members", "Members" },
            { "doclet.search.modules", "Modules" },
            { "doclet.search.no_results", "No results found" },
            { "doclet.search.packages", "Packages" },
            { "doclet.search.search_tags", "Search Tags" },
            { "doclet.search.types", "Types" },
            { "doclet.sourcetab_warning", "The argument for -sourcetab must be an integer greater than 0." },
            { "doclet.tag_misuse", "Tag {0} cannot be used in {1} documentation.  It can only be used in the following types of documentation: {2}." },
            { "doclet.taglet_could_not_set_location", "Could not set the taglet path: {0}" },
            { "doclet.urlRedirected", "URL {0} was redirected to {1} -- Update the command-line options to suppress this warning." },
            { "doclet.value_tag_invalid_constant", "@value tag (which references {0}) can only be used in constants." },
            { "doclet.value_tag_invalid_reference", "{0} (referenced by @value tag) is an unknown reference." },
            { "doclet.value_tag_invalid_use", "@value tag cannot be used here." },
        };
    }
}
